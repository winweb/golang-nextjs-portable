package main

import (
	"database/sql"
	"embed"
	"encoding/json"
	"fmt"
	"io/fs"
	"log"
	"net/http"
	"runtime/pprof"
	"strconv"

	_ "github.com/mattn/go-sqlite3"
)

//go:embed nextjs/dist
//go:embed nextjs/dist/_next
//go:embed nextjs/dist/_next/static/chunks/pages/*.js
//go:embed nextjs/dist/_next/static/*/*.js
var nextFS embed.FS

func main() {
	// Root at the `dist` folder generated by the Next.js app.
	distFS, err := fs.Sub(nextFS, "nextjs/dist")
	if err != nil {
		log.Fatal(err)
	}

	initial()

	// The static Next.js app will be served under `/`.
	http.Handle("/", http.FileServer(http.FS(distFS)))
	// The API will be served under `/api`.
	http.HandleFunc("/api", handleAPI)

	http.HandleFunc("/all", allPeople)

	http.HandleFunc("/add", addPeople)

	// Start HTTP server at :8080.
	log.Println("Starting HTTP server at http://localhost:8080 ...")
	log.Fatal(http.ListenAndServe(":8080", nil))

}

var (
	db *sql.DB
	statement *sql.Stmt
	res sql.Result
	increase int64
	lid int64
)

type People struct {
	Id      int
	Name    string
	Surname string
}

func initial() (err error) {
	log.Println("initial data ...")

	/*
		normal sql command
		PRAGMA journal_mode = WAL;
		PRAGMA synchronous = normal;
		PRAGMA temp_store = memory;
	*/
	db, err = sql.Open("sqlite3", "./date_file.db?_journal_mode=WAL&_synchronous=NORMAL&mode=shared&_busy_timeout=10000")
	if err != nil {
		log.Println("database error")
		return err
	}

	ddl := `
        CREATE TABLE IF NOT EXISTS people (
            id INTEGER PRIMARY KEY,
            name TEXT,
            surname TEXT
        );
    `
	statement, _ := db.Prepare(ddl)

	_, err = db.Exec("CREATE UNIQUE INDEX IF NOT EXISTS people_id_index ON people (id);")
	if err != nil {
		log.Printf("not create index. : %v", err)
	} else {
		log.Println("create index.")
	}

	statement.Exec()


	var count int64
	_ = db.QueryRow("SELECT COUNT(*) FROM people").Scan(&count)

	increase = count

	if count == 0 {
		statement, _ = db.Prepare("INSERT INTO people (name, surname) VALUES (?, ?)")
		statement.Exec("Nic1", "Robert1")
		statement.Exec("Nic2", "Robert2")
		statement.Exec("Nic3", "Robert3")
	} else {
		log.Println("not initial data.")
	}

	return nil
}

func allPeople(w http.ResponseWriter, _ *http.Request) {
	log.Println("all people ...")

	rows, _ := db.Query("SELECT id, name, surname FROM people")

	defer rows.Close()

	var result []People
	for rows.Next() {
		item := People{}

		rows.Scan(&item.Id, &item.Name, &item.Surname)

		result = append(result, item)

		var _ = strconv.Itoa(item.Id) + ": " + item.Name + " " + item.Surname
		//log.Println(output)
	}

	jsonB, _ := json.Marshal(result)

	fmt.Fprintf(w, "%s", string(jsonB))
}

func addPeople(w http.ResponseWriter, r *http.Request) {

	increase++

	log.Printf("add people no.: %v\n", increase)

	statement, _ = db.Prepare("INSERT INTO people (name, surname) VALUES (?, ?)")

	var res sql.Result
	res, _ = statement.Exec(
		"Nic" + strconv.FormatInt(increase, 10),
		"Robert" + strconv.FormatInt(increase, 10),
	)

	lid, _ = res.LastInsertId()

	log.Printf("lid: %v\n", lid)

	rows, _ := db.Query("SELECT id, name, surname FROM people WHERE id = " + strconv.FormatInt(lid, 10))

	defer rows.Close()

	var item = People{}
	if rows.Next() {
		rows.Scan(&item.Id, &item.Name, &item.Surname)
	}

	jsonB, _ := json.Marshal(item)

	fmt.Fprintf(w, "%s", string(jsonB))
}

func handleAPI(w http.ResponseWriter, _ *http.Request) {
	// Gather memory allocations profile.
	profile := pprof.Lookup("allocs")

	// Write profile (human readable, via debug: 1) to HTTP response.
	err := profile.WriteTo(w, 1)
	if err != nil {
		log.Printf("Error: Failed to write allocs profile: %v", err)
	}
}
